#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");
var socketIO = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var comments = [{
        user: "Batman",
        comment: "Great post!"
    },
    {
        user: "Robin",
        comment: "Interesting ideas..."
    },
    {
        user: "Joker",
        comment: "Thanks, Batman!"
    },
    {
        user: "Bruce Wayne",
        comment: "I agree with Batman"
    }
];

io = socketIO(server);

var count = 0;
io.on("connection", function(socket) {
    count++;
    io.emit("users.count", count);
    socket.on("disconnect", function() {
        count--;
        io.emit("users.count", count);
    });

    socket.emit("greeting-from-server", {
        greeting: "Hello Client"
    });

    socket.on("greeting-from-client", function(msg) {
        console.log(msg.greeting);
    });

    // for (var i = 0; i < comments.length; i++) {
    // example1
    // socket.emit('comment.add', comments[i]);

    // exxample2
    var i = 0;
    var addingPosts = setInterval(function() {
        if (comments[i]) {
            socket.emit("comment.add", comments[i]);
            socket.emit("comments.count", {
                count: i + 1
            });
            i++;
        } else {
            clearInterval(addingPosts);
        }
    }, 2000);

    setInterval(function() {
        socket.emit("seconds.update", {
            time: new Date()
        });
    }, 1000);

    // socket.emit('comments.count', {
    //     count: i + 1
    // });
    // }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}